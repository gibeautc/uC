
Sensor_Board.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  000007dc  00000870  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000007dc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800110  00800110  00000880  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000880  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000008b0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000128  00000000  00000000  000008f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001711  00000000  00000000  00000a18  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006f5  00000000  00000000  00002129  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000755  00000000  00000000  0000281e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002bc  00000000  00000000  00002f74  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000385  00000000  00000000  00003230  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000e8d  00000000  00000000  000035b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f0  00000000  00000000  00004442  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__vector_9>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec ed       	ldi	r30, 0xDC	; 220
  7c:	f7 e0       	ldi	r31, 0x07	; 7
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 31       	cpi	r26, 0x10	; 16
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e1       	ldi	r26, 0x10	; 16
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a4 31       	cpi	r26, 0x14	; 20
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 54 01 	call	0x2a8	; 0x2a8 <main>
  9e:	0c 94 ec 03 	jmp	0x7d8	; 0x7d8 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <init_Feedback>:



void init_Feedback(void)
{
	DDRD |= (1<<R_LED)|(1<<G_LED)|(1<<Vibration);
  a6:	8a b1       	in	r24, 0x0a	; 10
  a8:	80 6e       	ori	r24, 0xE0	; 224
  aa:	8a b9       	out	0x0a, r24	; 10
	PORTD |= (1<<R_LED)|(1<<G_LED)|(0<<Vibration);
  ac:	8b b1       	in	r24, 0x0b	; 11
  ae:	80 6c       	ori	r24, 0xC0	; 192
  b0:	8b b9       	out	0x0b, r24	; 11
  b2:	08 95       	ret

000000b4 <LED>:
}

void LED(uint8_t LED_Sel, uint8_t Pattern)
{
	switch (Pattern)
  b4:	61 30       	cpi	r22, 0x01	; 1
  b6:	19 f1       	breq	.+70     	; 0xfe <LED+0x4a>
  b8:	38 f0       	brcs	.+14     	; 0xc8 <LED+0x14>
  ba:	62 30       	cpi	r22, 0x02	; 2
  bc:	09 f4       	brne	.+2      	; 0xc0 <LED+0xc>
  be:	6b c0       	rjmp	.+214    	; 0x196 <LED+0xe2>
  c0:	64 30       	cpi	r22, 0x04	; 4
  c2:	09 f4       	brne	.+2      	; 0xc6 <LED+0x12>
  c4:	83 c0       	rjmp	.+262    	; 0x1cc <LED+0x118>
  c6:	08 95       	ret
	{
		case Pulse_1:
			PinLOW(PORTD, LED_Sel);
  c8:	4b b1       	in	r20, 0x0b	; 11
  ca:	21 e0       	ldi	r18, 0x01	; 1
  cc:	30 e0       	ldi	r19, 0x00	; 0
  ce:	b9 01       	movw	r22, r18
  d0:	02 c0       	rjmp	.+4      	; 0xd6 <LED+0x22>
  d2:	66 0f       	add	r22, r22
  d4:	77 1f       	adc	r23, r23
  d6:	8a 95       	dec	r24
  d8:	e2 f7       	brpl	.-8      	; 0xd2 <LED+0x1e>
  da:	cb 01       	movw	r24, r22
  dc:	96 2f       	mov	r25, r22
  de:	90 95       	com	r25
  e0:	94 23       	and	r25, r20
  e2:	9b b9       	out	0x0b, r25	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e4:	7f ef       	ldi	r23, 0xFF	; 255
  e6:	21 ee       	ldi	r18, 0xE1	; 225
  e8:	34 e0       	ldi	r19, 0x04	; 4
  ea:	71 50       	subi	r23, 0x01	; 1
  ec:	20 40       	sbci	r18, 0x00	; 0
  ee:	30 40       	sbci	r19, 0x00	; 0
  f0:	e1 f7       	brne	.-8      	; 0xea <LED+0x36>
  f2:	00 c0       	rjmp	.+0      	; 0xf4 <LED+0x40>
  f4:	00 00       	nop
			_delay_ms(200);
			PinHIGH(PORTD, LED_Sel);
  f6:	9b b1       	in	r25, 0x0b	; 11
  f8:	89 2b       	or	r24, r25
  fa:	8b b9       	out	0x0b, r24	; 11
			break;
  fc:	08 95       	ret
		case Pulse_3:
			PinLOW(PORTD, LED_Sel);
  fe:	4b b1       	in	r20, 0x0b	; 11
 100:	21 e0       	ldi	r18, 0x01	; 1
 102:	30 e0       	ldi	r19, 0x00	; 0
 104:	b9 01       	movw	r22, r18
 106:	02 c0       	rjmp	.+4      	; 0x10c <LED+0x58>
 108:	66 0f       	add	r22, r22
 10a:	77 1f       	adc	r23, r23
 10c:	8a 95       	dec	r24
 10e:	e2 f7       	brpl	.-8      	; 0x108 <LED+0x54>
 110:	cb 01       	movw	r24, r22
 112:	26 2f       	mov	r18, r22
 114:	20 95       	com	r18
 116:	92 2f       	mov	r25, r18
 118:	94 23       	and	r25, r20
 11a:	9b b9       	out	0x0b, r25	; 11
 11c:	7f ef       	ldi	r23, 0xFF	; 255
 11e:	31 ee       	ldi	r19, 0xE1	; 225
 120:	44 e0       	ldi	r20, 0x04	; 4
 122:	71 50       	subi	r23, 0x01	; 1
 124:	30 40       	sbci	r19, 0x00	; 0
 126:	40 40       	sbci	r20, 0x00	; 0
 128:	e1 f7       	brne	.-8      	; 0x122 <LED+0x6e>
 12a:	00 c0       	rjmp	.+0      	; 0x12c <LED+0x78>
 12c:	00 00       	nop
			_delay_ms(200);
			PinHIGH(PORTD, LED_Sel);
 12e:	9b b1       	in	r25, 0x0b	; 11
 130:	98 2b       	or	r25, r24
 132:	9b b9       	out	0x0b, r25	; 11
 134:	5f ef       	ldi	r21, 0xFF	; 255
 136:	61 ee       	ldi	r22, 0xE1	; 225
 138:	74 e0       	ldi	r23, 0x04	; 4
 13a:	51 50       	subi	r21, 0x01	; 1
 13c:	60 40       	sbci	r22, 0x00	; 0
 13e:	70 40       	sbci	r23, 0x00	; 0
 140:	e1 f7       	brne	.-8      	; 0x13a <LED+0x86>
 142:	00 c0       	rjmp	.+0      	; 0x144 <LED+0x90>
 144:	00 00       	nop
			_delay_ms(200);
			PinLOW(PORTD, LED_Sel);
 146:	9b b1       	in	r25, 0x0b	; 11
 148:	92 23       	and	r25, r18
 14a:	9b b9       	out	0x0b, r25	; 11
 14c:	3f ef       	ldi	r19, 0xFF	; 255
 14e:	41 ee       	ldi	r20, 0xE1	; 225
 150:	54 e0       	ldi	r21, 0x04	; 4
 152:	31 50       	subi	r19, 0x01	; 1
 154:	40 40       	sbci	r20, 0x00	; 0
 156:	50 40       	sbci	r21, 0x00	; 0
 158:	e1 f7       	brne	.-8      	; 0x152 <LED+0x9e>
 15a:	00 c0       	rjmp	.+0      	; 0x15c <LED+0xa8>
 15c:	00 00       	nop
			_delay_ms(200);
			PinHIGH(PORTD, LED_Sel);
 15e:	9b b1       	in	r25, 0x0b	; 11
 160:	98 2b       	or	r25, r24
 162:	9b b9       	out	0x0b, r25	; 11
 164:	6f ef       	ldi	r22, 0xFF	; 255
 166:	71 ee       	ldi	r23, 0xE1	; 225
 168:	34 e0       	ldi	r19, 0x04	; 4
 16a:	61 50       	subi	r22, 0x01	; 1
 16c:	70 40       	sbci	r23, 0x00	; 0
 16e:	30 40       	sbci	r19, 0x00	; 0
 170:	e1 f7       	brne	.-8      	; 0x16a <LED+0xb6>
 172:	00 c0       	rjmp	.+0      	; 0x174 <LED+0xc0>
 174:	00 00       	nop
			_delay_ms(200);
			PinLOW(PORTD, LED_Sel);
 176:	9b b1       	in	r25, 0x0b	; 11
 178:	92 23       	and	r25, r18
 17a:	9b b9       	out	0x0b, r25	; 11
 17c:	4f ef       	ldi	r20, 0xFF	; 255
 17e:	51 ee       	ldi	r21, 0xE1	; 225
 180:	64 e0       	ldi	r22, 0x04	; 4
 182:	41 50       	subi	r20, 0x01	; 1
 184:	50 40       	sbci	r21, 0x00	; 0
 186:	60 40       	sbci	r22, 0x00	; 0
 188:	e1 f7       	brne	.-8      	; 0x182 <LED+0xce>
 18a:	00 c0       	rjmp	.+0      	; 0x18c <LED+0xd8>
 18c:	00 00       	nop
			_delay_ms(200);
			PinHIGH(PORTD, LED_Sel);
 18e:	9b b1       	in	r25, 0x0b	; 11
 190:	89 2b       	or	r24, r25
 192:	8b b9       	out	0x0b, r24	; 11
			break;
 194:	08 95       	ret
		case Pulse_Long:
			PinLOW(PORTD, LED_Sel);
 196:	4b b1       	in	r20, 0x0b	; 11
 198:	21 e0       	ldi	r18, 0x01	; 1
 19a:	30 e0       	ldi	r19, 0x00	; 0
 19c:	b9 01       	movw	r22, r18
 19e:	02 c0       	rjmp	.+4      	; 0x1a4 <LED+0xf0>
 1a0:	66 0f       	add	r22, r22
 1a2:	77 1f       	adc	r23, r23
 1a4:	8a 95       	dec	r24
 1a6:	e2 f7       	brpl	.-8      	; 0x1a0 <LED+0xec>
 1a8:	cb 01       	movw	r24, r22
 1aa:	96 2f       	mov	r25, r22
 1ac:	90 95       	com	r25
 1ae:	94 23       	and	r25, r20
 1b0:	9b b9       	out	0x0b, r25	; 11
 1b2:	7f ef       	ldi	r23, 0xFF	; 255
 1b4:	29 e6       	ldi	r18, 0x69	; 105
 1b6:	38 e1       	ldi	r19, 0x18	; 24
 1b8:	71 50       	subi	r23, 0x01	; 1
 1ba:	20 40       	sbci	r18, 0x00	; 0
 1bc:	30 40       	sbci	r19, 0x00	; 0
 1be:	e1 f7       	brne	.-8      	; 0x1b8 <LED+0x104>
 1c0:	00 c0       	rjmp	.+0      	; 0x1c2 <LED+0x10e>
 1c2:	00 00       	nop
			_delay_ms(1000);
			PinHIGH(PORTD, LED_Sel);
 1c4:	9b b1       	in	r25, 0x0b	; 11
 1c6:	89 2b       	or	r24, r25
 1c8:	8b b9       	out	0x0b, r24	; 11
			break;
 1ca:	08 95       	ret
		case Alternate:
			PinLOW(PORTD, R_LED);
 1cc:	5f 98       	cbi	0x0b, 7	; 11
 1ce:	4f ef       	ldi	r20, 0xFF	; 255
 1d0:	51 ee       	ldi	r21, 0xE1	; 225
 1d2:	64 e0       	ldi	r22, 0x04	; 4
 1d4:	41 50       	subi	r20, 0x01	; 1
 1d6:	50 40       	sbci	r21, 0x00	; 0
 1d8:	60 40       	sbci	r22, 0x00	; 0
 1da:	e1 f7       	brne	.-8      	; 0x1d4 <LED+0x120>
 1dc:	00 c0       	rjmp	.+0      	; 0x1de <LED+0x12a>
 1de:	00 00       	nop
			_delay_ms(200);
			PinHIGH(PORTD, R_LED);
 1e0:	5f 9a       	sbi	0x0b, 7	; 11
 1e2:	8f e1       	ldi	r24, 0x1F	; 31
 1e4:	9e e4       	ldi	r25, 0x4E	; 78
 1e6:	01 97       	sbiw	r24, 0x01	; 1
 1e8:	f1 f7       	brne	.-4      	; 0x1e6 <LED+0x132>
 1ea:	00 c0       	rjmp	.+0      	; 0x1ec <LED+0x138>
 1ec:	00 00       	nop
			_delay_ms(10);
			PinLOW(PORTD, G_LED);
 1ee:	5e 98       	cbi	0x0b, 6	; 11
 1f0:	9f ef       	ldi	r25, 0xFF	; 255
 1f2:	21 ee       	ldi	r18, 0xE1	; 225
 1f4:	34 e0       	ldi	r19, 0x04	; 4
 1f6:	91 50       	subi	r25, 0x01	; 1
 1f8:	20 40       	sbci	r18, 0x00	; 0
 1fa:	30 40       	sbci	r19, 0x00	; 0
 1fc:	e1 f7       	brne	.-8      	; 0x1f6 <LED+0x142>
 1fe:	00 c0       	rjmp	.+0      	; 0x200 <LED+0x14c>
 200:	00 00       	nop
			_delay_ms(200);
			PinHIGH(PORTD, G_LED);
 202:	5e 9a       	sbi	0x0b, 6	; 11
			PinLOW(PORTD, R_LED);
 204:	5f 98       	cbi	0x0b, 7	; 11
 206:	4f ef       	ldi	r20, 0xFF	; 255
 208:	51 ee       	ldi	r21, 0xE1	; 225
 20a:	64 e0       	ldi	r22, 0x04	; 4
 20c:	41 50       	subi	r20, 0x01	; 1
 20e:	50 40       	sbci	r21, 0x00	; 0
 210:	60 40       	sbci	r22, 0x00	; 0
 212:	e1 f7       	brne	.-8      	; 0x20c <LED+0x158>
 214:	00 c0       	rjmp	.+0      	; 0x216 <LED+0x162>
 216:	00 00       	nop
			_delay_ms(200);
			PinHIGH(PORTD, R_LED);
 218:	5f 9a       	sbi	0x0b, 7	; 11
 21a:	8f e1       	ldi	r24, 0x1F	; 31
 21c:	9e e4       	ldi	r25, 0x4E	; 78
 21e:	01 97       	sbiw	r24, 0x01	; 1
 220:	f1 f7       	brne	.-4      	; 0x21e <LED+0x16a>
 222:	00 c0       	rjmp	.+0      	; 0x224 <LED+0x170>
 224:	00 00       	nop
			_delay_ms(10);
			PinLOW(PORTD, G_LED);
 226:	5e 98       	cbi	0x0b, 6	; 11
 228:	9f ef       	ldi	r25, 0xFF	; 255
 22a:	21 ee       	ldi	r18, 0xE1	; 225
 22c:	34 e0       	ldi	r19, 0x04	; 4
 22e:	91 50       	subi	r25, 0x01	; 1
 230:	20 40       	sbci	r18, 0x00	; 0
 232:	30 40       	sbci	r19, 0x00	; 0
 234:	e1 f7       	brne	.-8      	; 0x22e <LED+0x17a>
 236:	00 c0       	rjmp	.+0      	; 0x238 <LED+0x184>
 238:	00 00       	nop
			_delay_ms(200);
			PinHIGH(PORTD, G_LED);
 23a:	5e 9a       	sbi	0x0b, 6	; 11
 23c:	08 95       	ret

0000023e <init_tcnt2>:
	return;
}

void init_tcnt2()
{
	ASSR |=(0<<AS2);//Run of 32khz osc
 23e:	e6 eb       	ldi	r30, 0xB6	; 182
 240:	f0 e0       	ldi	r31, 0x00	; 0
 242:	80 81       	ld	r24, Z
 244:	80 83       	st	Z, r24
	TIMSK2=0x00;  //reset TIMSK
 246:	e0 e7       	ldi	r30, 0x70	; 112
 248:	f0 e0       	ldi	r31, 0x00	; 0
 24a:	10 82       	st	Z, r1
	TIMSK2 |=(1<<TOIE2);//turns on comp match interupt
 24c:	80 81       	ld	r24, Z
 24e:	81 60       	ori	r24, 0x01	; 1
 250:	80 83       	st	Z, r24
	TCCR2A=0;
 252:	10 92 b0 00 	sts	0x00B0, r1
	TCCR2B=(1<<CS21)|(1<<CS20);//Normal mode prescale 32 should give a 1ms count
 256:	83 e0       	ldi	r24, 0x03	; 3
 258:	80 93 b1 00 	sts	0x00B1, r24
 25c:	08 95       	ret

0000025e <__vector_9>:
#include "UART.h"

volatile unsigned long count_t=0;

ISR(TIMER2_OVF_vect)
{
 25e:	1f 92       	push	r1
 260:	0f 92       	push	r0
 262:	0f b6       	in	r0, 0x3f	; 63
 264:	0f 92       	push	r0
 266:	11 24       	eor	r1, r1
 268:	8f 93       	push	r24
 26a:	9f 93       	push	r25
 26c:	af 93       	push	r26
 26e:	bf 93       	push	r27
	count_t++;
 270:	80 91 10 01 	lds	r24, 0x0110
 274:	90 91 11 01 	lds	r25, 0x0111
 278:	a0 91 12 01 	lds	r26, 0x0112
 27c:	b0 91 13 01 	lds	r27, 0x0113
 280:	01 96       	adiw	r24, 0x01	; 1
 282:	a1 1d       	adc	r26, r1
 284:	b1 1d       	adc	r27, r1
 286:	80 93 10 01 	sts	0x0110, r24
 28a:	90 93 11 01 	sts	0x0111, r25
 28e:	a0 93 12 01 	sts	0x0112, r26
 292:	b0 93 13 01 	sts	0x0113, r27
}
 296:	bf 91       	pop	r27
 298:	af 91       	pop	r26
 29a:	9f 91       	pop	r25
 29c:	8f 91       	pop	r24
 29e:	0f 90       	pop	r0
 2a0:	0f be       	out	0x3f, r0	; 63
 2a2:	0f 90       	pop	r0
 2a4:	1f 90       	pop	r1
 2a6:	18 95       	reti

000002a8 <main>:

int main(void)
{
 2a8:	cf 93       	push	r28
 2aa:	df 93       	push	r29
 2ac:	cd b7       	in	r28, 0x3d	; 61
 2ae:	de b7       	in	r29, 0x3e	; 62
 2b0:	60 97       	sbiw	r28, 0x10	; 16
 2b2:	0f b6       	in	r0, 0x3f	; 63
 2b4:	f8 94       	cli
 2b6:	de bf       	out	0x3e, r29	; 62
 2b8:	0f be       	out	0x3f, r0	; 63
 2ba:	cd bf       	out	0x3d, r28	; 61
 2bc:	8f e1       	ldi	r24, 0x1F	; 31
 2be:	9e e4       	ldi	r25, 0x4E	; 78
 2c0:	01 97       	sbiw	r24, 0x01	; 1
 2c2:	f1 f7       	brne	.-4      	; 0x2c0 <main+0x18>
 2c4:	00 c0       	rjmp	.+0      	; 0x2c6 <main+0x1e>
 2c6:	00 00       	nop
	int16_t ax=0,ay=0,az=0;
	int16_t gx,gy,gz;
	short data[3];
	char addL[10];
	
	init_Feedback();
 2c8:	0e 94 53 00 	call	0xa6	; 0xa6 <init_Feedback>
	init_SPI();
 2cc:	0e 94 1c 03 	call	0x638	; 0x638 <init_SPI>
	uart_init();
 2d0:	0e 94 a7 03 	call	0x74e	; 0x74e <uart_init>
	init_tcnt2();
 2d4:	0e 94 1f 01 	call	0x23e	; 0x23e <init_tcnt2>
 2d8:	8f e1       	ldi	r24, 0x1F	; 31
 2da:	9e e4       	ldi	r25, 0x4E	; 78
 2dc:	01 97       	sbiw	r24, 0x01	; 1
 2de:	f1 f7       	brne	.-4      	; 0x2dc <main+0x34>
 2e0:	00 c0       	rjmp	.+0      	; 0x2e2 <main+0x3a>
 2e2:	00 00       	nop
	_delay_ms(10);
	//mpu_init(NULL);
	SPIinit_MPU(sensor1_cs, MPU9250_FULL_SCALE_4G, MPU9250_GYRO_FULL_SCALE_500DPS);
 2e4:	48 e0       	ldi	r20, 0x08	; 8
 2e6:	68 e0       	ldi	r22, 0x08	; 8
 2e8:	82 e0       	ldi	r24, 0x02	; 2
 2ea:	0e 94 15 02 	call	0x42a	; 0x42a <SPIinit_MPU>
	sei();
 2ee:	78 94       	sei
	
	//Initializations Successful
	LED(G_LED, Pulse_3);
 2f0:	61 e0       	ldi	r22, 0x01	; 1
 2f2:	86 e0       	ldi	r24, 0x06	; 6
 2f4:	0e 94 5a 00 	call	0xb4	; 0xb4 <LED>
	
    while (1) 
    {
		if(count_t>20000)
 2f8:	80 91 10 01 	lds	r24, 0x0110
 2fc:	90 91 11 01 	lds	r25, 0x0111
 300:	a0 91 12 01 	lds	r26, 0x0112
 304:	b0 91 13 01 	lds	r27, 0x0113
 308:	81 32       	cpi	r24, 0x21	; 33
 30a:	9e 44       	sbci	r25, 0x4E	; 78
 30c:	a1 05       	cpc	r26, r1
 30e:	b1 05       	cpc	r27, r1
 310:	40 f0       	brcs	.+16     	; 0x322 <main+0x7a>
			count_t=0;
 312:	10 92 10 01 	sts	0x0110, r1
 316:	10 92 11 01 	sts	0x0111, r1
 31a:	10 92 12 01 	sts	0x0112, r1
 31e:	10 92 13 01 	sts	0x0113, r1
		//mpu_get_accel_reg(data, NULL);
		//uart_puts("\nAccel:::");
		SPIgetAccel(data, sensor1_cs);
 322:	62 e0       	ldi	r22, 0x02	; 2
 324:	ce 01       	movw	r24, r28
 326:	01 96       	adiw	r24, 0x01	; 1
 328:	0e 94 c0 02 	call	0x580	; 0x580 <SPIgetAccel>
				
		
		uart_puts("*HX");
 32c:	80 e0       	ldi	r24, 0x00	; 0
 32e:	91 e0       	ldi	r25, 0x01	; 1
 330:	0e 94 98 03 	call	0x730	; 0x730 <uart_puts>
		itoa(count_t,addL,10);
 334:	80 91 10 01 	lds	r24, 0x0110
 338:	90 91 11 01 	lds	r25, 0x0111
 33c:	a0 91 12 01 	lds	r26, 0x0112
 340:	b0 91 13 01 	lds	r27, 0x0113
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 344:	4a e0       	ldi	r20, 0x0A	; 10
 346:	be 01       	movw	r22, r28
 348:	69 5f       	subi	r22, 0xF9	; 249
 34a:	7f 4f       	sbci	r23, 0xFF	; 255
 34c:	0e 94 b7 03 	call	0x76e	; 0x76e <__itoa_ncheck>
		uart_puts(addL);
 350:	ce 01       	movw	r24, r28
 352:	07 96       	adiw	r24, 0x07	; 7
 354:	0e 94 98 03 	call	0x730	; 0x730 <uart_puts>
		uart_puts("Y");
 358:	84 e0       	ldi	r24, 0x04	; 4
 35a:	91 e0       	ldi	r25, 0x01	; 1
 35c:	0e 94 98 03 	call	0x730	; 0x730 <uart_puts>
 360:	4a e0       	ldi	r20, 0x0A	; 10
 362:	be 01       	movw	r22, r28
 364:	69 5f       	subi	r22, 0xF9	; 249
 366:	7f 4f       	sbci	r23, 0xFF	; 255
 368:	89 81       	ldd	r24, Y+1	; 0x01
 36a:	9a 81       	ldd	r25, Y+2	; 0x02
 36c:	0e 94 b7 03 	call	0x76e	; 0x76e <__itoa_ncheck>
		itoa((int)data[0],addL,10);
		uart_puts(addL);
 370:	ce 01       	movw	r24, r28
 372:	07 96       	adiw	r24, 0x07	; 7
 374:	0e 94 98 03 	call	0x730	; 0x730 <uart_puts>
		uart_puts("*");
 378:	86 e0       	ldi	r24, 0x06	; 6
 37a:	91 e0       	ldi	r25, 0x01	; 1
 37c:	0e 94 98 03 	call	0x730	; 0x730 <uart_puts>
		
		uart_puts("*JX");
 380:	88 e0       	ldi	r24, 0x08	; 8
 382:	91 e0       	ldi	r25, 0x01	; 1
 384:	0e 94 98 03 	call	0x730	; 0x730 <uart_puts>
		itoa(count_t,addL,10);
 388:	80 91 10 01 	lds	r24, 0x0110
 38c:	90 91 11 01 	lds	r25, 0x0111
 390:	a0 91 12 01 	lds	r26, 0x0112
 394:	b0 91 13 01 	lds	r27, 0x0113
 398:	4a e0       	ldi	r20, 0x0A	; 10
 39a:	be 01       	movw	r22, r28
 39c:	69 5f       	subi	r22, 0xF9	; 249
 39e:	7f 4f       	sbci	r23, 0xFF	; 255
 3a0:	0e 94 b7 03 	call	0x76e	; 0x76e <__itoa_ncheck>
		uart_puts(addL);
 3a4:	ce 01       	movw	r24, r28
 3a6:	07 96       	adiw	r24, 0x07	; 7
 3a8:	0e 94 98 03 	call	0x730	; 0x730 <uart_puts>
		uart_puts("Y");
 3ac:	84 e0       	ldi	r24, 0x04	; 4
 3ae:	91 e0       	ldi	r25, 0x01	; 1
 3b0:	0e 94 98 03 	call	0x730	; 0x730 <uart_puts>
 3b4:	4a e0       	ldi	r20, 0x0A	; 10
 3b6:	be 01       	movw	r22, r28
 3b8:	69 5f       	subi	r22, 0xF9	; 249
 3ba:	7f 4f       	sbci	r23, 0xFF	; 255
 3bc:	8b 81       	ldd	r24, Y+3	; 0x03
 3be:	9c 81       	ldd	r25, Y+4	; 0x04
 3c0:	0e 94 b7 03 	call	0x76e	; 0x76e <__itoa_ncheck>
		itoa((int)data[1],addL,10);
		uart_puts(addL);
 3c4:	ce 01       	movw	r24, r28
 3c6:	07 96       	adiw	r24, 0x07	; 7
 3c8:	0e 94 98 03 	call	0x730	; 0x730 <uart_puts>
		uart_puts("*");
 3cc:	86 e0       	ldi	r24, 0x06	; 6
 3ce:	91 e0       	ldi	r25, 0x01	; 1
 3d0:	0e 94 98 03 	call	0x730	; 0x730 <uart_puts>
		
		uart_puts("*KX");
 3d4:	8c e0       	ldi	r24, 0x0C	; 12
 3d6:	91 e0       	ldi	r25, 0x01	; 1
 3d8:	0e 94 98 03 	call	0x730	; 0x730 <uart_puts>
		itoa(count_t,addL,10);
 3dc:	80 91 10 01 	lds	r24, 0x0110
 3e0:	90 91 11 01 	lds	r25, 0x0111
 3e4:	a0 91 12 01 	lds	r26, 0x0112
 3e8:	b0 91 13 01 	lds	r27, 0x0113
 3ec:	4a e0       	ldi	r20, 0x0A	; 10
 3ee:	be 01       	movw	r22, r28
 3f0:	69 5f       	subi	r22, 0xF9	; 249
 3f2:	7f 4f       	sbci	r23, 0xFF	; 255
 3f4:	0e 94 b7 03 	call	0x76e	; 0x76e <__itoa_ncheck>
		uart_puts(addL);
 3f8:	ce 01       	movw	r24, r28
 3fa:	07 96       	adiw	r24, 0x07	; 7
 3fc:	0e 94 98 03 	call	0x730	; 0x730 <uart_puts>
		uart_puts("Y");
 400:	84 e0       	ldi	r24, 0x04	; 4
 402:	91 e0       	ldi	r25, 0x01	; 1
 404:	0e 94 98 03 	call	0x730	; 0x730 <uart_puts>
 408:	4a e0       	ldi	r20, 0x0A	; 10
 40a:	be 01       	movw	r22, r28
 40c:	69 5f       	subi	r22, 0xF9	; 249
 40e:	7f 4f       	sbci	r23, 0xFF	; 255
 410:	8d 81       	ldd	r24, Y+5	; 0x05
 412:	9e 81       	ldd	r25, Y+6	; 0x06
 414:	0e 94 b7 03 	call	0x76e	; 0x76e <__itoa_ncheck>
		itoa((int)data[2],addL,10);
		uart_puts(addL);
 418:	ce 01       	movw	r24, r28
 41a:	07 96       	adiw	r24, 0x07	; 7
 41c:	0e 94 98 03 	call	0x730	; 0x730 <uart_puts>
		uart_puts("*");
 420:	86 e0       	ldi	r24, 0x06	; 6
 422:	91 e0       	ldi	r25, 0x01	; 1
 424:	0e 94 98 03 	call	0x730	; 0x730 <uart_puts>
		
		uart_puts("\n\n\n\n");
		_delay_ms(1000);
		*/
		
    }
 428:	67 cf       	rjmp	.-306    	; 0x2f8 <main+0x50>

0000042a <SPIinit_MPU>:

int16_t AG_SelfTest[6]; //Holds the self test results for accelerometer/Gyro
int16_t magCalib[3]={0,0,0}, magBias[3]={0,0,0};
int16_t accBias[3]={0,0,0}, gyroBias[3]={0,0,0};

void SPIinit_MPU(unsigned char sel, unsigned char A_range, unsigned char G_range){
 42a:	ef 92       	push	r14
 42c:	ff 92       	push	r15
 42e:	0f 93       	push	r16
 430:	1f 93       	push	r17
 432:	cf 93       	push	r28
 434:	df 93       	push	r29
 436:	00 d0       	rcall	.+0      	; 0x438 <SPIinit_MPU+0xe>
 438:	00 d0       	rcall	.+0      	; 0x43a <SPIinit_MPU+0x10>
 43a:	00 d0       	rcall	.+0      	; 0x43c <SPIinit_MPU+0x12>
 43c:	cd b7       	in	r28, 0x3d	; 61
 43e:	de b7       	in	r29, 0x3e	; 62
 440:	18 2f       	mov	r17, r24
 442:	f6 2e       	mov	r15, r22
 444:	e4 2e       	mov	r14, r20
	unsigned char data[6];
	
	data[0] = 0x80;
 446:	80 e8       	ldi	r24, 0x80	; 128
 448:	89 83       	std	Y+1, r24	; 0x01
	spi_writeRegs(sel, MPU9250_PWR_MGMT_1, 1, data);
 44a:	9e 01       	movw	r18, r28
 44c:	2f 5f       	subi	r18, 0xFF	; 255
 44e:	3f 4f       	sbci	r19, 0xFF	; 255
 450:	41 e0       	ldi	r20, 0x01	; 1
 452:	6b e6       	ldi	r22, 0x6B	; 107
 454:	81 2f       	mov	r24, r17
 456:	0e 94 2c 03 	call	0x658	; 0x658 <spi_writeRegs>
	data[0] = 0x01;
 45a:	01 e0       	ldi	r16, 0x01	; 1
 45c:	09 83       	std	Y+1, r16	; 0x01
	spi_writeRegs(sel, MPU9250_PWR_MGMT_1, 1, data);
 45e:	9e 01       	movw	r18, r28
 460:	2f 5f       	subi	r18, 0xFF	; 255
 462:	3f 4f       	sbci	r19, 0xFF	; 255
 464:	41 e0       	ldi	r20, 0x01	; 1
 466:	6b e6       	ldi	r22, 0x6B	; 107
 468:	81 2f       	mov	r24, r17
 46a:	0e 94 2c 03 	call	0x658	; 0x658 <spi_writeRegs>
	data[0] = 0x00;
 46e:	19 82       	std	Y+1, r1	; 0x01
	spi_writeRegs(sel, MPU9250_PWR_MGMT_2, 1, data);
 470:	9e 01       	movw	r18, r28
 472:	2f 5f       	subi	r18, 0xFF	; 255
 474:	3f 4f       	sbci	r19, 0xFF	; 255
 476:	41 e0       	ldi	r20, 0x01	; 1
 478:	6c e6       	ldi	r22, 0x6C	; 108
 47a:	81 2f       	mov	r24, r17
 47c:	0e 94 2c 03 	call	0x658	; 0x658 <spi_writeRegs>
	data[0] = 0x01;
 480:	09 83       	std	Y+1, r16	; 0x01
	spi_writeRegs(sel, MPU9250_CONFIG, 1, data);
 482:	9e 01       	movw	r18, r28
 484:	2f 5f       	subi	r18, 0xFF	; 255
 486:	3f 4f       	sbci	r19, 0xFF	; 255
 488:	41 e0       	ldi	r20, 0x01	; 1
 48a:	6a e1       	ldi	r22, 0x1A	; 26
 48c:	81 2f       	mov	r24, r17
 48e:	0e 94 2c 03 	call	0x658	; 0x658 <spi_writeRegs>
	data[0] = 0x01;
 492:	09 83       	std	Y+1, r16	; 0x01
	spi_writeRegs(sel, MPU9250_USER_CTRL, 1, data);
 494:	9e 01       	movw	r18, r28
 496:	2f 5f       	subi	r18, 0xFF	; 255
 498:	3f 4f       	sbci	r19, 0xFF	; 255
 49a:	41 e0       	ldi	r20, 0x01	; 1
 49c:	6a e6       	ldi	r22, 0x6A	; 106
 49e:	81 2f       	mov	r24, r17
 4a0:	0e 94 2c 03 	call	0x658	; 0x658 <spi_writeRegs>
	data[0] = G_range;
 4a4:	e9 82       	std	Y+1, r14	; 0x01
	spi_writeRegs(sel, MPU9250_GYRO_CONFIG, 1, data);
 4a6:	9e 01       	movw	r18, r28
 4a8:	2f 5f       	subi	r18, 0xFF	; 255
 4aa:	3f 4f       	sbci	r19, 0xFF	; 255
 4ac:	41 e0       	ldi	r20, 0x01	; 1
 4ae:	6b e1       	ldi	r22, 0x1B	; 27
 4b0:	81 2f       	mov	r24, r17
 4b2:	0e 94 2c 03 	call	0x658	; 0x658 <spi_writeRegs>
	data[0] = A_range;
 4b6:	f9 82       	std	Y+1, r15	; 0x01
	spi_writeRegs(sel, MPU9250_ACCEL_CONFIG, 1, data);
 4b8:	9e 01       	movw	r18, r28
 4ba:	2f 5f       	subi	r18, 0xFF	; 255
 4bc:	3f 4f       	sbci	r19, 0xFF	; 255
 4be:	41 e0       	ldi	r20, 0x01	; 1
 4c0:	6c e1       	ldi	r22, 0x1C	; 28
 4c2:	81 2f       	mov	r24, r17
 4c4:	0e 94 2c 03 	call	0x658	; 0x658 <spi_writeRegs>
	data[0] = 0x09;
 4c8:	89 e0       	ldi	r24, 0x09	; 9
 4ca:	89 83       	std	Y+1, r24	; 0x01
	spi_writeRegs(sel, MPU9250_ACCEL_CONFIG2, 1, data);
 4cc:	9e 01       	movw	r18, r28
 4ce:	2f 5f       	subi	r18, 0xFF	; 255
 4d0:	3f 4f       	sbci	r19, 0xFF	; 255
 4d2:	41 e0       	ldi	r20, 0x01	; 1
 4d4:	6d e1       	ldi	r22, 0x1D	; 29
 4d6:	81 2f       	mov	r24, r17
 4d8:	0e 94 2c 03 	call	0x658	; 0x658 <spi_writeRegs>
	data[0] = 0x30;
 4dc:	80 e3       	ldi	r24, 0x30	; 48
 4de:	89 83       	std	Y+1, r24	; 0x01
	spi_writeRegs(sel, 0x37, 1, data);
 4e0:	9e 01       	movw	r18, r28
 4e2:	2f 5f       	subi	r18, 0xFF	; 255
 4e4:	3f 4f       	sbci	r19, 0xFF	; 255
 4e6:	41 e0       	ldi	r20, 0x01	; 1
 4e8:	67 e3       	ldi	r22, 0x37	; 55
 4ea:	81 2f       	mov	r24, r17
 4ec:	0e 94 2c 03 	call	0x658	; 0x658 <spi_writeRegs>
	data[0] = 0x20;
 4f0:	80 e2       	ldi	r24, 0x20	; 32
 4f2:	89 83       	std	Y+1, r24	; 0x01
	spi_writeRegs(sel, 0x6A, 1, data);
 4f4:	9e 01       	movw	r18, r28
 4f6:	2f 5f       	subi	r18, 0xFF	; 255
 4f8:	3f 4f       	sbci	r19, 0xFF	; 255
 4fa:	41 e0       	ldi	r20, 0x01	; 1
 4fc:	6a e6       	ldi	r22, 0x6A	; 106
 4fe:	81 2f       	mov	r24, r17
 500:	0e 94 2c 03 	call	0x658	; 0x658 <spi_writeRegs>
	data[0] = 0x0D;
 504:	8d e0       	ldi	r24, 0x0D	; 13
 506:	89 83       	std	Y+1, r24	; 0x01
	spi_writeRegs(sel, 0x24, 1, data);
 508:	9e 01       	movw	r18, r28
 50a:	2f 5f       	subi	r18, 0xFF	; 255
 50c:	3f 4f       	sbci	r19, 0xFF	; 255
 50e:	41 e0       	ldi	r20, 0x01	; 1
 510:	64 e2       	ldi	r22, 0x24	; 36
 512:	81 2f       	mov	r24, r17
 514:	0e 94 2c 03 	call	0x658	; 0x658 <spi_writeRegs>
	data[0] = MPU9250_MAG_ADDRESS;
 518:	88 e1       	ldi	r24, 0x18	; 24
 51a:	89 83       	std	Y+1, r24	; 0x01
	spi_writeRegs(sel, 0x25, 1, data);
 51c:	9e 01       	movw	r18, r28
 51e:	2f 5f       	subi	r18, 0xFF	; 255
 520:	3f 4f       	sbci	r19, 0xFF	; 255
 522:	41 e0       	ldi	r20, 0x01	; 1
 524:	65 e2       	ldi	r22, 0x25	; 37
 526:	81 2f       	mov	r24, r17
 528:	0e 94 2c 03 	call	0x658	; 0x658 <spi_writeRegs>
	data[0] = MPU9250_MAG_CNTL2;
 52c:	8b e0       	ldi	r24, 0x0B	; 11
 52e:	89 83       	std	Y+1, r24	; 0x01
	spi_writeRegs(sel, 0x26, 1, data);
 530:	9e 01       	movw	r18, r28
 532:	2f 5f       	subi	r18, 0xFF	; 255
 534:	3f 4f       	sbci	r19, 0xFF	; 255
 536:	41 e0       	ldi	r20, 0x01	; 1
 538:	66 e2       	ldi	r22, 0x26	; 38
 53a:	81 2f       	mov	r24, r17
 53c:	0e 94 2c 03 	call	0x658	; 0x658 <spi_writeRegs>
	data[0] = 0x01;
 540:	09 83       	std	Y+1, r16	; 0x01
	spi_writeRegs(sel, 0x63, 1, data);
 542:	9e 01       	movw	r18, r28
 544:	2f 5f       	subi	r18, 0xFF	; 255
 546:	3f 4f       	sbci	r19, 0xFF	; 255
 548:	41 e0       	ldi	r20, 0x01	; 1
 54a:	63 e6       	ldi	r22, 0x63	; 99
 54c:	81 2f       	mov	r24, r17
 54e:	0e 94 2c 03 	call	0x658	; 0x658 <spi_writeRegs>
	data[0] = 0x81;
 552:	81 e8       	ldi	r24, 0x81	; 129
 554:	89 83       	std	Y+1, r24	; 0x01
	spi_writeRegs(sel, 0x27, 1, data);
 556:	9e 01       	movw	r18, r28
 558:	2f 5f       	subi	r18, 0xFF	; 255
 55a:	3f 4f       	sbci	r19, 0xFF	; 255
 55c:	41 e0       	ldi	r20, 0x01	; 1
 55e:	67 e2       	ldi	r22, 0x27	; 39
 560:	81 2f       	mov	r24, r17
 562:	0e 94 2c 03 	call	0x658	; 0x658 <spi_writeRegs>
	
	return;
}
 566:	26 96       	adiw	r28, 0x06	; 6
 568:	0f b6       	in	r0, 0x3f	; 63
 56a:	f8 94       	cli
 56c:	de bf       	out	0x3e, r29	; 62
 56e:	0f be       	out	0x3f, r0	; 63
 570:	cd bf       	out	0x3d, r28	; 61
 572:	df 91       	pop	r29
 574:	cf 91       	pop	r28
 576:	1f 91       	pop	r17
 578:	0f 91       	pop	r16
 57a:	ff 90       	pop	r15
 57c:	ef 90       	pop	r14
 57e:	08 95       	ret

00000580 <SPIgetAccel>:

void SPIgetAccel(short* data, unsigned char sel){
 580:	0f 93       	push	r16
 582:	1f 93       	push	r17
 584:	cf 93       	push	r28
 586:	df 93       	push	r29
 588:	00 d0       	rcall	.+0      	; 0x58a <SPIgetAccel+0xa>
 58a:	00 d0       	rcall	.+0      	; 0x58c <SPIgetAccel+0xc>
 58c:	00 d0       	rcall	.+0      	; 0x58e <SPIgetAccel+0xe>
 58e:	cd b7       	in	r28, 0x3d	; 61
 590:	de b7       	in	r29, 0x3e	; 62
 592:	8c 01       	movw	r16, r24
 594:	86 2f       	mov	r24, r22
	uint8_t AccelData[6];
	
	spi_readRegs(sel, MPU9250_ACCEL_XOUT_H, 6, AccelData);
 596:	9e 01       	movw	r18, r28
 598:	2f 5f       	subi	r18, 0xFF	; 255
 59a:	3f 4f       	sbci	r19, 0xFF	; 255
 59c:	46 e0       	ldi	r20, 0x06	; 6
 59e:	6b e3       	ldi	r22, 0x3B	; 59
 5a0:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <spi_readRegs>
	
	data[0] = (((int16_t)AccelData[0]) << 8) | AccelData[1];
 5a4:	89 81       	ldd	r24, Y+1	; 0x01
 5a6:	90 e0       	ldi	r25, 0x00	; 0
 5a8:	98 2f       	mov	r25, r24
 5aa:	88 27       	eor	r24, r24
 5ac:	2a 81       	ldd	r18, Y+2	; 0x02
 5ae:	82 2b       	or	r24, r18
 5b0:	f8 01       	movw	r30, r16
 5b2:	91 83       	std	Z+1, r25	; 0x01
 5b4:	80 83       	st	Z, r24
	data[1] = (((int16_t)AccelData[2]) << 8) | AccelData[3];
 5b6:	2b 81       	ldd	r18, Y+3	; 0x03
 5b8:	30 e0       	ldi	r19, 0x00	; 0
 5ba:	32 2f       	mov	r19, r18
 5bc:	22 27       	eor	r18, r18
 5be:	8c 81       	ldd	r24, Y+4	; 0x04
 5c0:	28 2b       	or	r18, r24
 5c2:	33 83       	std	Z+3, r19	; 0x03
 5c4:	22 83       	std	Z+2, r18	; 0x02
	data[2] = (((int16_t)AccelData[4]) << 8) | AccelData[5];
 5c6:	2d 81       	ldd	r18, Y+5	; 0x05
 5c8:	30 e0       	ldi	r19, 0x00	; 0
 5ca:	32 2f       	mov	r19, r18
 5cc:	22 27       	eor	r18, r18
 5ce:	8e 81       	ldd	r24, Y+6	; 0x06
 5d0:	28 2b       	or	r18, r24
 5d2:	35 83       	std	Z+5, r19	; 0x05
 5d4:	24 83       	std	Z+4, r18	; 0x04
	return;
}
 5d6:	26 96       	adiw	r28, 0x06	; 6
 5d8:	0f b6       	in	r0, 0x3f	; 63
 5da:	f8 94       	cli
 5dc:	de bf       	out	0x3e, r29	; 62
 5de:	0f be       	out	0x3f, r0	; 63
 5e0:	cd bf       	out	0x3d, r28	; 61
 5e2:	df 91       	pop	r29
 5e4:	cf 91       	pop	r28
 5e6:	1f 91       	pop	r17
 5e8:	0f 91       	pop	r16
 5ea:	08 95       	ret

000005ec <select>:
	receivedchar=SPDR;
	return (receivedchar);
}//End SPI_send

void select(uint8_t slvdevice){
	switch (slvdevice)
 5ec:	82 30       	cpi	r24, 0x02	; 2
 5ee:	49 f0       	breq	.+18     	; 0x602 <select+0x16>
 5f0:	18 f4       	brcc	.+6      	; 0x5f8 <select+0xc>
 5f2:	88 23       	and	r24, r24
 5f4:	61 f0       	breq	.+24     	; 0x60e <select+0x22>
 5f6:	08 95       	ret
 5f8:	86 30       	cpi	r24, 0x06	; 6
 5fa:	39 f0       	breq	.+14     	; 0x60a <select+0x1e>
 5fc:	87 30       	cpi	r24, 0x07	; 7
 5fe:	19 f0       	breq	.+6      	; 0x606 <select+0x1a>
 600:	08 95       	ret
	{
	case sensor1_cs:
		PinLOW(PORTB, sensor1_cs);
 602:	2a 98       	cbi	0x05, 2	; 5
		break;
 604:	08 95       	ret
	case sensor2_cs:
		PinLOW(PORTB, sensor2_cs);
 606:	2f 98       	cbi	0x05, 7	; 5
		break;
 608:	08 95       	ret
	case sensor3_cs:
		PinLOW(PORTB, sensor3_cs);
 60a:	2e 98       	cbi	0x05, 6	; 5
		break;
 60c:	08 95       	ret
	case sram_cs:
		PinLOW(PORTC, sram_cs);
 60e:	40 98       	cbi	0x08, 0	; 8
 610:	08 95       	ret

00000612 <deselect>:
	return;
}

void deselect(uint8_t slvdevice){
{
		switch (slvdevice)
 612:	82 30       	cpi	r24, 0x02	; 2
 614:	49 f0       	breq	.+18     	; 0x628 <deselect+0x16>
 616:	18 f4       	brcc	.+6      	; 0x61e <deselect+0xc>
 618:	88 23       	and	r24, r24
 61a:	61 f0       	breq	.+24     	; 0x634 <deselect+0x22>
 61c:	08 95       	ret
 61e:	86 30       	cpi	r24, 0x06	; 6
 620:	39 f0       	breq	.+14     	; 0x630 <deselect+0x1e>
 622:	87 30       	cpi	r24, 0x07	; 7
 624:	19 f0       	breq	.+6      	; 0x62c <deselect+0x1a>
 626:	08 95       	ret
		{
			case sensor1_cs:
			PinHIGH(PORTB, sensor1_cs);
 628:	2a 9a       	sbi	0x05, 2	; 5
			break;
 62a:	08 95       	ret
			case sensor2_cs:
			PinHIGH(PORTB, sensor2_cs);
 62c:	2f 9a       	sbi	0x05, 7	; 5
			break;
 62e:	08 95       	ret
			case sensor3_cs:
			PinHIGH(PORTB, sensor3_cs);
 630:	2e 9a       	sbi	0x05, 6	; 5
			break;
 632:	08 95       	ret
			case sram_cs:
			PinHIGH(PORTC, sram_cs);
 634:	40 9a       	sbi	0x08, 0	; 8
 636:	08 95       	ret

00000638 <init_SPI>:
#define readbit 0x80

void init_SPI()
{
	//DDRB houses SPI pins SCK-5 MOSI-3 MISO-4 used for programing
	DDRB|=(1<<5)|(1<<3)|(0<<4)|(1<<sensor1_cs)|(1<<1)|(1<<sensor2_cs);
 638:	84 b1       	in	r24, 0x04	; 4
 63a:	8e 6a       	ori	r24, 0xAE	; 174
 63c:	84 b9       	out	0x04, r24	; 4
	deselect(sensor1_cs);
 63e:	82 e0       	ldi	r24, 0x02	; 2
 640:	0e 94 09 03 	call	0x612	; 0x612 <deselect>
	deselect(sensor2_cs);
 644:	87 e0       	ldi	r24, 0x07	; 7
 646:	0e 94 09 03 	call	0x612	; 0x612 <deselect>
	DDRC |=(1<<sram_cs);//Sets up chip select for sram
 64a:	38 9a       	sbi	0x07, 0	; 7
	PORTC|=(1<<sram_cs);//deselect
 64c:	40 9a       	sbi	0x08, 0	; 8
	SPCR=0;
 64e:	1c bc       	out	0x2c, r1	; 44
	SPCR=(1<<SPE)|(1<<MSTR)|(1<<SPR0);  //master mode sets 2x speed
 650:	81 e5       	ldi	r24, 0x51	; 81
 652:	8c bd       	out	0x2c, r24	; 44
	//(1<<SPR0);
	//SPSR=(1<<SPI2X);
	SPSR=0;
 654:	1d bc       	out	0x2d, r1	; 45
 656:	08 95       	ret

00000658 <spi_writeRegs>:
 * @ data, data pointer where the data is written to reg addr
 *   and sequentially hence forth if greater than 1
 * @ return, success or failure
 */
int spi_writeRegs(unsigned char sel, unsigned char reg_addr,
		unsigned char length, unsigned char const *data) {
 658:	ff 92       	push	r15
 65a:	0f 93       	push	r16
 65c:	1f 93       	push	r17
 65e:	cf 93       	push	r28
 660:	df 93       	push	r29
 662:	d8 2f       	mov	r29, r24
 664:	f6 2e       	mov	r15, r22
 666:	c4 2f       	mov	r28, r20
 668:	89 01       	movw	r16, r18
	uint8_t i;
	select(sel);
 66a:	0e 94 f6 02 	call	0x5ec	; 0x5ec <select>
	
	SPDR=reg_addr;
 66e:	fe bc       	out	0x2e, r15	; 46
	while(bit_is_clear(SPSR,SPIF)){}
 670:	0d b4       	in	r0, 0x2d	; 45
 672:	07 fe       	sbrs	r0, 7
 674:	fd cf       	rjmp	.-6      	; 0x670 <spi_writeRegs+0x18>
	for(i=0; i<length; i++)
 676:	cc 23       	and	r28, r28
 678:	99 f0       	breq	.+38     	; 0x6a0 <spi_writeRegs+0x48>
 67a:	f8 01       	movw	r30, r16
 67c:	c1 50       	subi	r28, 0x01	; 1
 67e:	4c 2f       	mov	r20, r28
 680:	50 e0       	ldi	r21, 0x00	; 0
 682:	4f 5f       	subi	r20, 0xFF	; 255
 684:	5f 4f       	sbci	r21, 0xFF	; 255
 686:	98 01       	movw	r18, r16
 688:	24 0f       	add	r18, r20
 68a:	35 1f       	adc	r19, r21
	{
		SPDR=data[i];
		SPDR=0xFF;
 68c:	4f ef       	ldi	r20, 0xFF	; 255
	
	SPDR=reg_addr;
	while(bit_is_clear(SPSR,SPIF)){}
	for(i=0; i<length; i++)
	{
		SPDR=data[i];
 68e:	91 91       	ld	r25, Z+
 690:	9e bd       	out	0x2e, r25	; 46
		SPDR=0xFF;
 692:	4e bd       	out	0x2e, r20	; 46
		while(bit_is_clear(SPSR,SPIF)){};
 694:	0d b4       	in	r0, 0x2d	; 45
 696:	07 fe       	sbrs	r0, 7
 698:	fd cf       	rjmp	.-6      	; 0x694 <spi_writeRegs+0x3c>
	uint8_t i;
	select(sel);
	
	SPDR=reg_addr;
	while(bit_is_clear(SPSR,SPIF)){}
	for(i=0; i<length; i++)
 69a:	e2 17       	cp	r30, r18
 69c:	f3 07       	cpc	r31, r19
 69e:	b9 f7       	brne	.-18     	; 0x68e <spi_writeRegs+0x36>
	{
		SPDR=data[i];
		SPDR=0xFF;
		while(bit_is_clear(SPSR,SPIF)){};
	}
	deselect(sel);
 6a0:	8d 2f       	mov	r24, r29
 6a2:	0e 94 09 03 	call	0x612	; 0x612 <deselect>
	return 0;
}
 6a6:	80 e0       	ldi	r24, 0x00	; 0
 6a8:	90 e0       	ldi	r25, 0x00	; 0
 6aa:	df 91       	pop	r29
 6ac:	cf 91       	pop	r28
 6ae:	1f 91       	pop	r17
 6b0:	0f 91       	pop	r16
 6b2:	ff 90       	pop	r15
 6b4:	08 95       	ret

000006b6 <spi_readRegs>:
 * @ data, data pointer where the data is read from reg addr
 *   and sequentially hence forth if greater than 1
 * @ return, success or failure
 */
int spi_readRegs(unsigned char sel, unsigned char reg_addr,
		unsigned char length, unsigned char *data) {
 6b6:	ff 92       	push	r15
 6b8:	0f 93       	push	r16
 6ba:	1f 93       	push	r17
 6bc:	cf 93       	push	r28
 6be:	df 93       	push	r29
 6c0:	08 2f       	mov	r16, r24
 6c2:	16 2f       	mov	r17, r22
 6c4:	f4 2e       	mov	r15, r20
 6c6:	e9 01       	movw	r28, r18
	int i=0;
	
	select(sel);
 6c8:	0e 94 f6 02 	call	0x5ec	; 0x5ec <select>
	
	SPDR=(reg_addr | readbit);
 6cc:	10 68       	ori	r17, 0x80	; 128
 6ce:	1e bd       	out	0x2e, r17	; 46
	while(bit_is_clear(SPSR,SPIF)){};
 6d0:	0d b4       	in	r0, 0x2d	; 45
 6d2:	07 fe       	sbrs	r0, 7
 6d4:	fd cf       	rjmp	.-6      	; 0x6d0 <spi_readRegs+0x1a>
	SPDR=0xFF;
 6d6:	8f ef       	ldi	r24, 0xFF	; 255
 6d8:	8e bd       	out	0x2e, r24	; 46
	while(bit_is_clear(SPSR,SPIF)){};
 6da:	0d b4       	in	r0, 0x2d	; 45
 6dc:	07 fe       	sbrs	r0, 7
 6de:	fd cf       	rjmp	.-6      	; 0x6da <spi_readRegs+0x24>
	for(i=0; i<length; i++)
 6e0:	ff 20       	and	r15, r15
 6e2:	71 f0       	breq	.+28     	; 0x700 <spi_readRegs+0x4a>
 6e4:	fe 01       	movw	r30, r28
 6e6:	9e 01       	movw	r18, r28
 6e8:	2f 0d       	add	r18, r15
 6ea:	31 1d       	adc	r19, r1
	{
		data[i]=SPDR;
		SPDR=0xFF;
 6ec:	4f ef       	ldi	r20, 0xFF	; 255
	while(bit_is_clear(SPSR,SPIF)){};
	SPDR=0xFF;
	while(bit_is_clear(SPSR,SPIF)){};
	for(i=0; i<length; i++)
	{
		data[i]=SPDR;
 6ee:	9e b5       	in	r25, 0x2e	; 46
 6f0:	91 93       	st	Z+, r25
		SPDR=0xFF;
 6f2:	4e bd       	out	0x2e, r20	; 46
		while(bit_is_clear(SPSR,SPIF)){};
 6f4:	0d b4       	in	r0, 0x2d	; 45
 6f6:	07 fe       	sbrs	r0, 7
 6f8:	fd cf       	rjmp	.-6      	; 0x6f4 <spi_readRegs+0x3e>
	
	SPDR=(reg_addr | readbit);
	while(bit_is_clear(SPSR,SPIF)){};
	SPDR=0xFF;
	while(bit_is_clear(SPSR,SPIF)){};
	for(i=0; i<length; i++)
 6fa:	e2 17       	cp	r30, r18
 6fc:	f3 07       	cpc	r31, r19
 6fe:	b9 f7       	brne	.-18     	; 0x6ee <spi_readRegs+0x38>
	{
		data[i]=SPDR;
		SPDR=0xFF;
		while(bit_is_clear(SPSR,SPIF)){};
	}
	deselect(sel);
 700:	80 2f       	mov	r24, r16
 702:	0e 94 09 03 	call	0x612	; 0x612 <deselect>
	return 0;
 706:	80 e0       	ldi	r24, 0x00	; 0
 708:	90 e0       	ldi	r25, 0x00	; 0
 70a:	df 91       	pop	r29
 70c:	cf 91       	pop	r28
 70e:	1f 91       	pop	r17
 710:	0f 91       	pop	r16
 712:	ff 90       	pop	r15
 714:	08 95       	ret

00000716 <uart_putc>:
//                        uart_putc
//
// Takes a character and sends it to USART0
//
void uart_putc(char data) {
    while (!(UCSR0A&(1<<UDRE0)));    // Wait for previous transmissions
 716:	e0 ec       	ldi	r30, 0xC0	; 192
 718:	f0 e0       	ldi	r31, 0x00	; 0
 71a:	90 81       	ld	r25, Z
 71c:	95 ff       	sbrs	r25, 5
 71e:	fd cf       	rjmp	.-6      	; 0x71a <uart_putc+0x4>
    UDR0 = data;    // Send data byte
 720:	80 93 c6 00 	sts	0x00C6, r24
    while (!(UCSR0A&(1<<UDRE0)));    // Wait for previous transmissions
 724:	e0 ec       	ldi	r30, 0xC0	; 192
 726:	f0 e0       	ldi	r31, 0x00	; 0
 728:	80 81       	ld	r24, Z
 72a:	85 ff       	sbrs	r24, 5
 72c:	fd cf       	rjmp	.-6      	; 0x728 <uart_putc+0x12>
}
 72e:	08 95       	ret

00000730 <uart_puts>:

//******************************************************************
//                        uart_puts
// Takes a string and sends each charater to be sent to USART0
//void uart_puts(unsigned char *str) {
void uart_puts(char *str) {
 730:	cf 93       	push	r28
 732:	df 93       	push	r29
 734:	ec 01       	movw	r28, r24
    int i = 0;
    while(str[i] != '\0') { // Loop through string, sending each character
 736:	88 81       	ld	r24, Y
 738:	88 23       	and	r24, r24
 73a:	31 f0       	breq	.+12     	; 0x748 <uart_puts+0x18>
 73c:	21 96       	adiw	r28, 0x01	; 1
        uart_putc(str[i]);
 73e:	0e 94 8b 03 	call	0x716	; 0x716 <uart_putc>
//                        uart_puts
// Takes a string and sends each charater to be sent to USART0
//void uart_puts(unsigned char *str) {
void uart_puts(char *str) {
    int i = 0;
    while(str[i] != '\0') { // Loop through string, sending each character
 742:	89 91       	ld	r24, Y+
 744:	81 11       	cpse	r24, r1
 746:	fb cf       	rjmp	.-10     	; 0x73e <uart_puts+0xe>
        uart_putc(str[i]);
        i++;
    }
  //uart_putc('\n');
}
 748:	df 91       	pop	r29
 74a:	cf 91       	pop	r28
 74c:	08 95       	ret

0000074e <uart_init>:
//must be in place for the MAX232 chip to get data.

void uart_init(){
//rx and tx enable, receive interrupt enabled, 8 bit characters
//  UCSR0B |= (1<<RXEN0) | (1<<TXEN0) | (1<<RXCIE0);
  UCSR0B |= (1<<RXEN0) | (1<<TXEN0);  //INTERRUPS DISABLED!!!
 74e:	e1 ec       	ldi	r30, 0xC1	; 193
 750:	f0 e0       	ldi	r31, 0x00	; 0
 752:	80 81       	ld	r24, Z
 754:	88 61       	ori	r24, 0x18	; 24
 756:	80 83       	st	Z, r24

//  UCSR0B |= (1<<RXEN0) | (1<<TXEN0) ;
//async operation, no parity,  one stop bit, 8-bit characters
UCSR0C |= (1<<UCSZ01) | (1<<UCSZ00);
 758:	e2 ec       	ldi	r30, 0xC2	; 194
 75a:	f0 e0       	ldi	r31, 0x00	; 0
 75c:	80 81       	ld	r24, Z
 75e:	86 60       	ori	r24, 0x06	; 6
 760:	80 83       	st	Z, r24
UBRR0H = (BAUDVALUE >>8 ); //load upper byte of the baud rate into UBRR 
 762:	10 92 c5 00 	sts	0x00C5, r1
UBRR0L =  BAUDVALUE;       //load lower byte of the baud rate into UBRR 
 766:	8c e0       	ldi	r24, 0x0C	; 12
 768:	80 93 c4 00 	sts	0x00C4, r24
 76c:	08 95       	ret

0000076e <__itoa_ncheck>:
 76e:	bb 27       	eor	r27, r27
 770:	4a 30       	cpi	r20, 0x0A	; 10
 772:	31 f4       	brne	.+12     	; 0x780 <__itoa_ncheck+0x12>
 774:	99 23       	and	r25, r25
 776:	22 f4       	brpl	.+8      	; 0x780 <__itoa_ncheck+0x12>
 778:	bd e2       	ldi	r27, 0x2D	; 45
 77a:	90 95       	com	r25
 77c:	81 95       	neg	r24
 77e:	9f 4f       	sbci	r25, 0xFF	; 255
 780:	0c 94 c3 03 	jmp	0x786	; 0x786 <__utoa_common>

00000784 <__utoa_ncheck>:
 784:	bb 27       	eor	r27, r27

00000786 <__utoa_common>:
 786:	fb 01       	movw	r30, r22
 788:	55 27       	eor	r21, r21
 78a:	aa 27       	eor	r26, r26
 78c:	88 0f       	add	r24, r24
 78e:	99 1f       	adc	r25, r25
 790:	aa 1f       	adc	r26, r26
 792:	a4 17       	cp	r26, r20
 794:	10 f0       	brcs	.+4      	; 0x79a <__utoa_common+0x14>
 796:	a4 1b       	sub	r26, r20
 798:	83 95       	inc	r24
 79a:	50 51       	subi	r21, 0x10	; 16
 79c:	b9 f7       	brne	.-18     	; 0x78c <__utoa_common+0x6>
 79e:	a0 5d       	subi	r26, 0xD0	; 208
 7a0:	aa 33       	cpi	r26, 0x3A	; 58
 7a2:	08 f0       	brcs	.+2      	; 0x7a6 <__utoa_common+0x20>
 7a4:	a9 5d       	subi	r26, 0xD9	; 217
 7a6:	a1 93       	st	Z+, r26
 7a8:	00 97       	sbiw	r24, 0x00	; 0
 7aa:	79 f7       	brne	.-34     	; 0x78a <__utoa_common+0x4>
 7ac:	b1 11       	cpse	r27, r1
 7ae:	b1 93       	st	Z+, r27
 7b0:	11 92       	st	Z+, r1
 7b2:	cb 01       	movw	r24, r22
 7b4:	0c 94 dc 03 	jmp	0x7b8	; 0x7b8 <strrev>

000007b8 <strrev>:
 7b8:	dc 01       	movw	r26, r24
 7ba:	fc 01       	movw	r30, r24
 7bc:	67 2f       	mov	r22, r23
 7be:	71 91       	ld	r23, Z+
 7c0:	77 23       	and	r23, r23
 7c2:	e1 f7       	brne	.-8      	; 0x7bc <strrev+0x4>
 7c4:	32 97       	sbiw	r30, 0x02	; 2
 7c6:	04 c0       	rjmp	.+8      	; 0x7d0 <strrev+0x18>
 7c8:	7c 91       	ld	r23, X
 7ca:	6d 93       	st	X+, r22
 7cc:	70 83       	st	Z, r23
 7ce:	62 91       	ld	r22, -Z
 7d0:	ae 17       	cp	r26, r30
 7d2:	bf 07       	cpc	r27, r31
 7d4:	c8 f3       	brcs	.-14     	; 0x7c8 <strrev+0x10>
 7d6:	08 95       	ret

000007d8 <_exit>:
 7d8:	f8 94       	cli

000007da <__stop_program>:
 7da:	ff cf       	rjmp	.-2      	; 0x7da <__stop_program>
